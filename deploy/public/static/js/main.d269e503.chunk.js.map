{"version":3,"sources":["actions/types.js","actions/errorAction.js","actions/authAction.js","reducers/postReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/peopleReducer.js","reducers/index.js","store.js","components/Root/Root.js","App.js","serviceWorker.js","index.js"],"names":["GET_POSTS","ADD_POST","DELETE_POST","POSTS_LOADING","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","GET_ERRORS","CLEAR_ERRORS","PEOPLE_LOADING","PEOPLE_LOADED","PEOPLE_FOLLOWED","PEOPLE_UNFOLLOWED","GET_PEOPLE_POSTS","POST_LIKED","POST_UNLIKED","POST_COMMENTED","returnErrors","msg","status","id","type","payload","clearErrors","loadUser","dispatch","getState","axios","get","process","tokenConfig","then","res","data","catch","err","response","register","name","email","password","body","JSON","stringify","post","headers","login","logout","token","auth","config","initialState","posts","peoplePosts","loading","localStorage","getItem","isAuthenticated","isLoading","user","users","combineReducers","state","action","filter","_id","error","setItem","removeItem","people","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","NavBar","React","lazy","Login","SignUp","Home","Profile","AllUsers","connect","props","fallback","color","height","width","timeout","style","textAlign","Container","marginTop","Row","Col","path","exact","from","to","App","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d269e503.chunk.js","sourcesContent":["export const GET_POSTS = 'GET_POSTS';\nexport const ADD_POST = 'ADD_POST';\nexport const DELETE_POST= 'DELETE_POST';\nexport const POSTS_LOADING = 'POSTS_LOADING';\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\nexport const PEOPLE_LOADING = \"PEOPLE_LOADING\";\nexport const PEOPLE_LOADED = \"PEOPLE_LOADED\";\nexport const PEOPLE_FOLLOWED = \"PEOPLE_FOLLOWED\";\nexport const PEOPLE_UNFOLLOWED=\"PEOPLE_UNFOLLOWED\";\nexport const GET_PEOPLE_POSTS=\"GET_PEOPLE_POSTS\";\nexport const POST_LIKED=\"POST_LIKED\";\nexport const  POST_UNLIKED=\"POST_UNLIKED\";\nexport const  POST_COMMENTED=\"POST_COMMENTED\"","import { GET_ERRORS, CLEAR_ERRORS } from './types';\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status, id = null) => {\n  return {\n    type: GET_ERRORS,\n    payload: { msg, status, id }\n  };\n};\n\n// CLEAR ERRORS\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};","import axios from 'axios';\nimport { returnErrors } from './errorAction';\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(process.env.REACT_APP_BACKEND_URL+'/auth/user', tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n// Register User\nexport const register = ({ name, email, password }) => (\n  dispatch\n) => {\n  dispatch({ type: USER_LOADING });\n\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // Request body\n  const body = JSON.stringify({ name, email, password });\n\n  axios\n    .post(process.env.REACT_APP_BACKEND_URL+'/auth/signup', body, config)\n    .then(res =>{\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    }\n      \n    )\n    .catch(err => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\n      );\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n};\n\n// Login User\nexport const login = ({ email, password }) => (\n  dispatch\n) => {\n  dispatch({ type: USER_LOADING });\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // Request body\n  const body = JSON.stringify({ email, password });\n  axios\n    .post(process.env.REACT_APP_BACKEND_URL+'/auth/login', body, config)\n    .then(res =>{\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    }\n      \n    )\n    .catch(err => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\n      );\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n};\n\n// Logout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\n// Setup config/headers and token\nexport const tokenConfig = (getState) => {\n  // Get token from localstorage\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  // If token, add to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","import {\n    GET_POSTS,\n    ADD_POST,\n    DELETE_POST,\n    POSTS_LOADING,\n    GET_PEOPLE_POSTS,\n    POST_LIKED,\n    POST_UNLIKED,\n    POST_COMMENTED\n\n  } from '../actions/types';\n  \n  const initialState = {\n    posts: [],\n    peoplePosts:[],\n    loading: false\n  };\n  \n\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case GET_POSTS:\n        return {\n          ...state,\n          posts: action.payload,\n          loading: false\n        };\n          case GET_PEOPLE_POSTS:\n          return {\n            ...state,\n            peoplePosts: [...action.payload],\n            loading: false\n          };\n      case DELETE_POST:\n        return {\n          ...state,\n          posts: state.posts.filter(post => post._id !== action.payload),\n          loading: false\n        };\n      case ADD_POST:\n        return {\n          ...state,\n          posts: [...action.payload, ...state.posts]\n        };\n        case POST_LIKED:\n          case POST_UNLIKED:\n            case POST_COMMENTED:\n          return{\n            ...state,\n            loading: false\n          }\n      case POSTS_LOADING:\n        return {\n          ...state,\n          loading: true\n        };\n      default:\n        return state;\n    }\n  }","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\nconst initialState = {\n  msg: {},\n  status: null,\n  id: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return {\n        msg: action.payload.msg,\n        status: action.payload.status,\n        id: action.payload.id\n      };\n    case CLEAR_ERRORS:\n      return {\n        msg: {},\n        status: null,\n        id: null\n      };\n    default:\n      return state;\n  }\n}","import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n  } from '../actions/types';\n  \n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n  };\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case USER_LOADING:\n        return {\n          ...state,\n          isLoading: true\n        };\n      case USER_LOADED:\n        return {\n          ...state,\n          isAuthenticated: true,\n          isLoading: false,\n          user: action.payload\n        };\n      case LOGIN_SUCCESS:\n      case REGISTER_SUCCESS:\n        localStorage.setItem('token', action.payload.token);\n        return {\n          ...state,\n          ...action.payload,\n          isAuthenticated: true,\n          isLoading: false\n        };\n      case AUTH_ERROR:\n      case LOGIN_FAIL:\n      case LOGOUT_SUCCESS:\n      case REGISTER_FAIL:\n        localStorage.removeItem('token');\n        return {\n          ...state,\n          token: null,\n          user: null,\n          isAuthenticated: false,\n          isLoading: false\n        };\n      default:\n        return state;\n    }\n  }","import {\n    PEOPLE_LOADED,\n    PEOPLE_LOADING,\n    PEOPLE_FOLLOWED,\n    PEOPLE_UNFOLLOWED,\n  } from '../actions/types';\n\n  const initialState = {\n    users:[],\n    isLoading: false\n  };\n\n\n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case PEOPLE_LOADING:\n        return {\n          ...state,\n          isLoading: true\n        };\n      case PEOPLE_LOADED:\n        return {\n          ...state,\n          isLoading: false,\n          users: action.payload\n        };\n        case PEOPLE_FOLLOWED:\n        case PEOPLE_UNFOLLOWED:\n          return {\n            ...state\n          };\n      default:\n        return state;\n    }\n  }","import { combineReducers } from 'redux';\nimport postReducer from \"./postReducer\";\nimport errorReducer from './errorReducer';\nimport authReducer from './authReducer';\nimport peopleReducer from './peopleReducer';\n\n\nexport default combineReducers({\n    post:postReducer,\n    error: errorReducer,\n  auth: authReducer,\n  people:peopleReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleWare = [thunk];\n\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleWare)\n  )\n);\n\nexport default store;","import React,{Suspense} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nimport {Container,Row,Col} from \"react-bootstrap\";\n\nimport {connect} from \"react-redux\";\n\nimport Loader from 'react-loader-spinner'\n\n\n\n// import NavBar from \"../NavBar/NavBar\"\n// import Login from \"../LoginRegister/Login/Login\"\n// import SignUp from \"../LoginRegister/Register/Register\"\n// import Home from \"../Home/Home\";\n// import Profile from \"../Profile/Profile\"\n// import AllUsers from \"../AllUsers/AllUsers\"\n\n\nconst NavBar =React.lazy(()=>import(\"../NavBar/NavBar\"));\nconst Login =React.lazy(()=>import(\"../LoginRegister/Login/Login\"));\nconst SignUp =React.lazy(()=>import(\"../LoginRegister/Register/Register\"));\nconst Home =React.lazy(()=>import(\"../Home/Home\"));\nconst Profile =React.lazy(()=>import(\"../Profile/Profile\"));\nconst AllUsers =React.lazy(()=>import(\"../AllUsers/AllUsers\"));\n\n\nfunction Root(props) {\n\n\n\n  return (\n       <Router>\n          <Suspense fallback={ <Loader\n              type=\"Circles\"\n              color=\"#29ff00\"\n              height={100}\n              width={100}\n              timeout={5000} //3 secs\n              style={{textAlign:\"center\"}}/>\n              }>\n         <NavBar/>\n         <Container style={{marginTop:\"100px\"}}>\n          <Row>\n            <Col>\n           \n            \n             \n\n            <Switch>\n          <Route path=\"/\" exact>\n          {/* <Redirect  to=\"/profile\"/> */}\n         {props.auth?<Home/>:<Redirect from=\"/\" to=\"/login\"/>} \n          </Route>\n\n          <Route path=\"/profile\" exact>\n         {props.auth?<Profile/>:<Redirect to=\"/login\"/>} \n          </Route>\n          <Route path=\"/people\" exact>\n         {props.auth?<AllUsers/>:<Redirect to=\"/login\"/>} \n          </Route>\n         \n\n          \n        <Route path=\"/login\" exact>\n          <Login/>\n          </Route>\n          <Route path=\"/signup\" exact>\n           <SignUp/>\n          </Route>\n          </Switch>\n            </Col>\n          </Row>\n        </Container>\n      </Suspense>\n    </Router>\n  );\n}\n\nconst mapStateToProps=(state)=>({\n    auth:state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps,null)(Root);\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nimport React,{useEffect} from 'react';\n\n\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport {loadUser} from \"./actions/authAction\";\n\n\nimport './App.css';\n\n\n\nimport Root from \"./components/Root/Root\"\n\nfunction App() {\n\n  useEffect(()=>{\n    store.dispatch(loadUser());\n  },[]);\n\n  return (\n    <Provider store={store}>\n       <Root/>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}